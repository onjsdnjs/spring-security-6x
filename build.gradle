buildscript {
    ext {
        springBootVersion = '3.5.0'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'io.springsecurity.springsecurity6x'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 21

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springStatemachineVersion = '4.0.0'
}


dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Spring Boot Starter Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation("com.webauthn4j:webauthn4j-core:0.29.2.RELEASE")

    // Spring State Machine 4.0.0
    implementation('org.springframework.statemachine:spring-statemachine-starter')

    // Spring Session
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation("org.apache.commons:commons-pool2:2.12.1")

    implementation 'org.apache.commons:commons-pool2:2.11.1'

    // Resilience4j
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-bulkhead:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.1.0'

    // Micrometer
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation("org.postgresql:postgresql:42.7.6")
//    runtimeOnly 'com.h2database:h2'

    // Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    // JWT (JSON Web Token)
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'  // JSON 처리를 위한 Jackson 통합

    // Kryo (State Machine 직렬화)
    implementation 'com.esotericsoftware:kryo:5.5.0'
    implementation 'org.springframework.statemachine:spring-statemachine-kryo:4.0.0'
    implementation("org.redisson:redisson-spring-boot-starter:3.48.0")
    implementation("org.springframework.statemachine:spring-statemachine-data-redis:4.0.0")

    //ModelMapper
    implementation("org.modelmapper:modelmapper:3.2.3")

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.statemachine:spring-statemachine-test:4.0.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.4"
        mavenBom "io.github.resilience4j:resilience4j-bom:2.1.0"
        mavenBom "org.springframework.statemachine:spring-statemachine-bom:${springStatemachineVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    jvmArgs '-Xmx1024m'
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// 의존성 검증
task checkDependencies {
    doLast {
        configurations.compileClasspath.each { file ->
            if (file.name.contains('spring-statemachine-redis')) {
                println "Found spring-statemachine-redis: ${file.name}"
            }
        }
    }
}