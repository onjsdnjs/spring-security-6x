package io.springsecurity.springsecurity6x.security.filter;

import io.springsecurity.springsecurity6x.security.exception.TokenInvalidException;
import io.springsecurity.springsecurity6x.security.http.AuthResponseWriter;
import io.springsecurity.springsecurity6x.security.token.service.TokenService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpMethod;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.LogoutHandler;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Objects;

@Slf4j
public class JwtRefreshAuthenticationFilter extends OncePerRequestFilter {

    private final TokenService tokenService;
    private final String refreshUri;
    private final LogoutHandler logoutHandler;
    private final AuthResponseWriter responseWriter;

    public JwtRefreshAuthenticationFilter(TokenService tokenService,
                                          LogoutHandler logoutHandler, // null 가능
                                          AuthResponseWriter responseWriter) {
        this.tokenService = Objects.requireNonNull(tokenService, "TokenService cannot be null");
        this.logoutHandler = logoutHandler;
        this.responseWriter = Objects.requireNonNull(responseWriter, "AuthResponseWriter cannot be null");

        if (tokenService.properties() == null ||
                tokenService.properties().getInternal() == null ||
                !StringUtils.hasText(tokenService.properties().getInternal().getRefreshUri())) {
            throw new IllegalArgumentException("Refresh URI cannot be determined from tokenService properties.");
        }
        this.refreshUri = tokenService.properties().getInternal().getRefreshUri();
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException {
        if (!refreshUri.equals(request.getRequestURI()) || !HttpMethod.POST.name().equalsIgnoreCase(request.getMethod())) {
            chain.doFilter(request, response);
            return;
        }
        log.debug("JwtRefreshAuthenticationFilter processing POST request for: {}", request.getRequestURI());

        String refreshTokenFromRequest = tokenService.resolveRefreshToken(request);

        if (StringUtils.hasText(refreshTokenFromRequest)) {
            try {
                log.debug("Attempting to refresh token.");
                TokenService.RefreshResult result = tokenService.refresh(refreshTokenFromRequest);

                // <<< [핵심] 성공 시: TokenService의 기존 응답 생성 로직 사용 >>>
                tokenService.writeAccessAndRefreshToken(response, result.accessToken(), result.refreshToken());
                log.info("Token refreshed successfully. Response generated by TokenService.");
                return; // 응답은 TokenService가 완료

            } catch (TokenInvalidException tie) {
                log.warn("Invalid refresh token for URI {}: {}", request.getRequestURI(), tie.getMessage());
                handleFailure(request, response, HttpServletResponse.SC_UNAUTHORIZED, "invalid_refresh_token", "리프레시 토큰이 유효하지 않거나 만료되었습니다: " + tie.getMessage());
                return;
            } catch (Exception e) {
                log.error("Unexpected error during token refresh for URI {}: {}", request.getRequestURI(), e.getMessage(), e);
                handleFailure(request, response, HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "token_refresh_error", "토큰 리프레시 중 서버 오류가 발생했습니다.");
                return;
            }
        } else {
            log.warn("No refresh token found in POST request to {}", refreshUri);
            responseWriter.writeSuccessResponse(response, "리프레시 토큰 없음", HttpServletResponse.SC_NO_CONTENT);

            return;
        }
    }

    /**
     * 리프레시 실패 시 (선택적으로) 로그아웃 처리 후 JSON 오류 응답을 보냅니다.
     */
    private void handleFailure(HttpServletRequest request, HttpServletResponse response, int status, String errorCode, String errorMessage) throws IOException {
        SecurityContextHolder.clearContext();

        Authentication auth = SecurityContextHolder.getContext().getAuthentication(); // 이미 null일 것임
        if (logoutHandler != null) {
            try {
                logoutHandler.logout(request, response, auth); // auth는 null일 가능성이 높음
            } catch (Exception logoutEx) {
                log.warn("Exception during logout_handler execution after refresh failure: {}", logoutEx.getMessage());
            }
        }

        if (!response.isCommitted()) {
            responseWriter.writeErrorResponse(response, status, errorCode, errorMessage, request.getRequestURI());
        } else {
            log.warn("Response already committed (possibly by logoutHandler). Cannot write JSON error for refresh failure. Status: {}, ErrorCode: {}", status, errorCode);
        }
    }
}

