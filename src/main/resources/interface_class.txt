
// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.action =====

// ----- Class: AbstractMfaStateAction -----
protected AbstractMfaStateAction(FactorContextStateAdapter factorContextAdapter, StateContextHelper stateContextHelper);
@Override
public final void execute(StateContext<MfaState, MfaEvent> context);
protected abstract void doExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext) throws Exception;
protected String extractSessionId(StateContext<MfaState, MfaEvent> context);
protected FactorContext extractFactorContext(StateContext<MfaState, MfaEvent> context);
protected void updateStateMachineVariables(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);
protected void handleError(StateContext<MfaState, MfaEvent> context, Exception e);
protected boolean canExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);

// ----- Class: CompleteMfaAction -----
public CompleteMfaAction(FactorContextStateAdapter factorContextAdapter, StateContextHelper stateContextHelper);
@Override
protected void doExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext) throws Exception;
private void performCompletionTasks(FactorContext factorContext);
@Override
protected boolean canExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);

// ----- Class: HandleFailureAction -----
public HandleFailureAction(FactorContextStateAdapter factorContextAdapter, StateContextHelper stateContextHelper);
@Override
protected void doExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext) throws Exception;

// ----- Class: InitializeMfaAction -----
public InitializeMfaAction(FactorContextStateAdapter factorContextAdapter, StateContextHelper stateContextHelper);
@Override
protected void doExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext) throws Exception;

// ----- Class: InitiateChallengeAction -----
public InitiateChallengeAction(FactorContextStateAdapter factorContextAdapter, StateContextHelper stateContextHelper);
@Override
protected void doExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext) throws Exception;

// ----- Interface: MfaStateAction -----
default boolean validateContext(FactorContext context);
public String getActionName();

// ----- Class: SelectFactorAction -----
public SelectFactorAction(FactorContextStateAdapter factorContextAdapter, StateContextHelper stateContextHelper);
@Override
protected void doExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext) throws Exception;

// ----- Class: VerifyFactorAction -----
public VerifyFactorAction(FactorContextStateAdapter factorContextAdapter, StateContextHelper stateContextHelper);
@Override
protected void doExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext) throws Exception;
private AuthenticationStepConfig createCompletedStep(String stepId, String factorType, FactorContext factorContext);
private void updateVerificationSuccess(FactorContext factorContext, AuthenticationStepConfig completedStep);
private String extractFactorTypeFromContext(StateContext<MfaState, MfaEvent> context);
@Override
protected boolean canExecute(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.adapter =====

// ----- Interface: FactorContextStateAdapter -----
public Map<Object, Object> toStateMachineVariables(FactorContext factorContext);
public void updateFactorContext(StateMachine<MfaState, MfaEvent> stateMachine, FactorContext factorContext);
public void updateFactorContext(StateContext<MfaState, MfaEvent> stateContext, FactorContext factorContext);

// ----- Class: FactorContextStateAdapterImpl -----
@Override
public Map<Object, Object> toStateMachineVariables(FactorContext factorContext);
@Override
public void updateFactorContext(StateMachine<MfaState, MfaEvent> stateMachine, FactorContext factorContext);
@Override
public void updateFactorContext(StateContext<MfaState, MfaEvent> stateContext, FactorContext factorContext);
private void updateFactorContextFromVariables(FactorContext factorContext, Map<Object, Object> variables);
private String serializeCompletedFactors(FactorContext factorContext);
private String serializeAvailableFactors(Set<?> availableFactors);

// ----- Interface: MfaEventAdapter -----
public MfaEvent determineEvent(String action, FactorContext context);
public boolean canTriggerEvent(MfaEvent event, FactorContext context);
public int getMaxRetries();
public long calculateSessionDuration(FactorContext context);
default Message<MfaEvent> toStateMachineMessage(MfaEvent event, FactorContext context);

// ----- Class: MfaEventAdapterImpl -----
public MfaEventAdapterImpl(AuthContextProperties authContextProperties);
@Override
public MfaEvent determineEvent(String action, FactorContext context);
@Override
public boolean canTriggerEvent(MfaEvent event, FactorContext context);
@Override
public int getMaxRetries();
@Override
public long calculateSessionDuration(FactorContext context);
@Override
public Message<MfaEvent> toStateMachineMessage(MfaEvent event, FactorContext context);
private MfaEvent mapActionToEvent(String action);
private MfaEvent adjustEventBasedOnContext(MfaEvent event, FactorContext context);
private boolean isRetryEvent(MfaEvent event);
private boolean isSessionExpired(FactorContext context);
public String getEventDescription(MfaEvent event);

// ----- Class: MfaStateMachineFeature -----
@Override
public String getId();
@Override
public void apply(HttpSecurity http, PlatformContext context);

// ----- Class: StateTransitionAdapter -----
public boolean isValidTransition(MfaState currentState, MfaEvent event);
public MfaState getTargetState(MfaState currentState, MfaEvent event);
public TransitionInfo extractTransitionInfo(Transition<MfaState, MfaEvent> transition);
// Inner Record: TransitionInfo (no explicit methods other than accessors and constructor)

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.config =====

// ----- Class: InMemoryPersistenceConfig -----
public StateMachinePersist<MfaState, MfaEvent, String> stateMachinePersist();
public StateMachinePersister<MfaState, MfaEvent, String> stateMachinePersister(StateMachinePersist<MfaState, MfaEvent, String> stateMachinePersist);

// ----- Class: MfaStateMachineConfiguration -----
public MfaStateMachineConfiguration(InitializeMfaAction initializeMfaAction, SelectFactorAction selectFactorAction, InitiateChallengeAction initiateChallengeAction, VerifyFactorAction verifyFactorAction, CompleteMfaAction completeMfaAction, HandleFailureAction handleFailureAction, AllFactorsCompletedGuard allFactorsCompletedGuard, RetryLimitGuard retryLimitGuard);
@Override
public void configure(StateMachineConfigurationConfigurer<MfaState, MfaEvent> config) throws Exception;
@Override
public void configure(StateMachineStateConfigurer<MfaState, MfaEvent> states) throws Exception;
@Override
public void configure(StateMachineTransitionConfigurer<MfaState, MfaEvent> transitions) throws Exception;
@Bean
public StateMachineListener<MfaState, MfaEvent> listener();

// ----- Class: RedisConfiguration -----
@Bean(name = "stateMachineRedisTemplate")
@ConditionalOnMissingBean(name = "stateMachineRedisTemplate")
public RedisTemplate<String, byte[]> stateMachineRedisTemplate(RedisConnectionFactory connectionFactory);

// ----- Class: RedisPersistenceConfig -----
public RedisPersistenceConfig(StateMachineProperties properties);
@Bean
@Primary
public StateMachinePersist<MfaState, MfaEvent, String> stateMachinePersist(@Qualifier("stateMachineRedisTemplate") RedisTemplate<String, byte[]> redisTemplate);
@Bean
public StateMachinePersister<MfaState, MfaEvent, String> stateMachinePersister(StateMachinePersist<MfaState, MfaEvent, String> stateMachinePersist);

// ----- Class: StateMachineAutoConfiguration -----
public StateMachineAutoConfiguration(StateMachineProperties properties, AuthContextProperties authContextProperties);
@Bean
@ConditionalOnProperty(prefix = "security.statemachine.mfa", name = "enableMetrics", havingValue = "true", matchIfMissing = true)
public MfaStateChangeListener mfaStateChangeListener();

// ----- Class: StateMachineProperties -----
// (Lombok @Data - getters/setters are auto-generated)
public boolean isEnabled();
public void setEnabled(boolean enabled);
public boolean isEnablePersistence();
public void setEnablePersistence(boolean enablePersistence);
public Integer getContextTtlMinutes();
public void setContextTtlMinutes(Integer contextTtlMinutes);
public MfaProperties getMfa();
public void setMfa(MfaProperties mfa);
public RedisProperties getRedis();
public void setRedis(RedisProperties redis);
// Inner Class: MfaProperties
public boolean isEnableMetrics();
public void setEnableMetrics(boolean enableMetrics);
public Integer getMaxRetries();
public void setMaxRetries(Integer maxRetries);
public Integer getSessionTimeoutMinutes();
public void setSessionTimeoutMinutes(Integer sessionTimeoutMinutes);
// Inner Class: RedisProperties
public boolean isEnabled();
public void setEnabled(boolean enabled);
public Integer getTtlMinutes();
public void setTtlMinutes(Integer ttlMinutes);
public String getKeyPrefix();
public void setKeyPrefix(String keyPrefix);

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.core =====

// ----- Class: InMemoryStateMachinePersist -----
@Override
public void write(StateMachineContext<MfaState, MfaEvent> context, String contextObj) throws Exception;
@Override
public StateMachineContext<MfaState, MfaEvent> read(String contextObj) throws Exception;
public void delete(String contextObj);

// ----- Interface: MfaEventListener -----
public void onEvent(MfaEvent event, FactorContext context, String sessionId);

// ----- Interface: MfaEventPublisher -----
public void publishStateChange(String sessionId, MfaState state, MfaEvent event);
public void publishError(String sessionId, Exception error);
public void publishCustomEvent(String eventType, Object payload);

// ----- Class: MfaEventPublisherImpl -----
public MfaEventPublisherImpl(ApplicationEventPublisher applicationEventPublisher);
@Override
public void publishStateChange(String sessionId, MfaState state, MfaEvent event);
@Override
public void publishError(String sessionId, Exception error);
@Override
public void publishCustomEvent(String eventType, Object payload);
// Inner Class: MfaStateChangeEvent
public MfaStateChangeEvent(Object source, String sessionId, MfaState state, MfaEvent event, LocalDateTime timestamp);
public Object getSource();
public String getSessionId();
public MfaState getState();
public MfaEvent getEvent();
public LocalDateTime getTimestamp();
// Inner Class: MfaErrorEvent
public MfaErrorEvent(Object source, String sessionId, Exception error, LocalDateTime timestamp);
public Object getSource();
public String getSessionId();
public Exception getError();
public LocalDateTime getTimestamp();

// ----- Interface: MfaStateMachineFactory -----
public StateMachine<MfaState, MfaEvent> createStateMachine(String machineId);
public StateMachine<MfaState, MfaEvent> createStateMachine();
public StateMachine<MfaState, MfaEvent> restoreStateMachine(String machineId);
public void releaseStateMachine(String machineId);

// ----- Class: MfaStateMachineFactoryImpl -----
public MfaStateMachineFactoryImpl(StateMachineFactory<MfaState, MfaEvent> stateMachineFactory, StateMachinePersister<MfaState, MfaEvent, String> stateMachinePersister);
@Override
public StateMachine<MfaState, MfaEvent> createStateMachine(String machineId);
@Override
public StateMachine<MfaState, MfaEvent> createStateMachine();
@Override
public StateMachine<MfaState, MfaEvent> restoreStateMachine(String machineId);
@Override
public void releaseStateMachine(String machineId);
private String generateMachineId();
public boolean isStateMachineValid(StateMachine<MfaState, MfaEvent> stateMachine);

// ----- Interface: MfaStateMachineService -----
public void initializeStateMachine(FactorContext context, HttpServletRequest request);
public boolean sendEvent(MfaEvent event, FactorContext context, HttpServletRequest request);
public MfaState getCurrentState(String sessionId);
public void releaseStateMachine(String sessionId);

// ----- Class: MfaStateMachineServiceImpl -----
// Inner Class: CachedStateMachine
CachedStateMachine(StateMachine<MfaState, MfaEvent> stateMachine);
boolean isExpired(int ttlMinutes);
public MfaStateMachineServiceImpl(MfaStateMachineFactory stateMachineFactory, StateMachinePersister<MfaState, MfaEvent, String> stateMachinePersister, FactorContextStateAdapter factorContextAdapter, ContextPersistence contextPersistence, MfaEventPublisher eventPublisher);
@Override
public void initializeStateMachine(FactorContext context, HttpServletRequest request);
@Override
public boolean sendEvent(MfaEvent event, FactorContext context, HttpServletRequest request);
@Override
public MfaState getCurrentState(String sessionId);
@Override
public void releaseStateMachine(String sessionId);
private StateMachine<MfaState, MfaEvent> acquireStateMachine(String sessionId, FactorContext context);
private void persistStateMachine(StateMachine<MfaState, MfaEvent> stateMachine, String sessionId);
private boolean isStateMachineValid(StateMachine<MfaState, MfaEvent> stateMachine);
private StateMachine<MfaState, MfaEvent> getActiveStateMachine(String sessionId);
private void cleanupExpiredMachines();
public void shutdown();

// ----- Class: RedisStateMachinePersist -----
public RedisStateMachinePersist(RedisTemplate<String, byte[]> redisTemplate, int ttlMinutes);
@Override
public void write(StateMachineContext<MfaState, MfaEvent> context, String contextObj) throws Exception;
@Override
public StateMachineContext<MfaState, MfaEvent> read(String contextObj) throws Exception;
public void delete(String contextObj);
private String generateKey(String sessionId);
private byte[] serialize(StateMachineContext<MfaState, MfaEvent> context) throws IOException;
private StateMachineContext<MfaState, MfaEvent> deserialize(byte[] data) throws IOException, ClassNotFoundException;
public Map<String, StateMachineContext<MfaState, MfaEvent>> readAll();

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.enums =====
// (Skipped as per previous instruction for enums)

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.guard =====

// ----- Class: AbstractMfaStateGuard -----
@Override
public final boolean evaluate(StateContext<MfaState, MfaEvent> context);
protected abstract boolean doEvaluate(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);
protected FactorContext extractFactorContext(StateContext<MfaState, MfaEvent> context);
public Guard<MfaState, MfaEvent> negate();
@Override
public abstract String getFailureReason();
@Override
public abstract String getGuardName();

// ----- Class: AllFactorsCompletedGuard -----
public AllFactorsCompletedGuard(MfaPolicyProvider mfaPolicyProvider);
@Override
protected boolean doEvaluate(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);
private int getRequiredFactorCount(FactorContext factorContext);
private int getDefaultRequiredFactorCount(String flowType);
@Override
public String getFailureReason();
public boolean isFactorTypeCompleted(FactorContext factorContext, String factorType);
public boolean needsMoreFactors(FactorContext factorContext);
@Override
public String getGuardName();

// ----- Class: FactorAvailabilityGuard -----
public FactorAvailabilityGuard();
@Override
protected boolean doEvaluate(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);
@Override
public String getGuardName();
@Override
public String getFailureReason();

// ----- Interface: MfaStateGuard -----
public String getGuardName();
public String getFailureReason();

// ----- Class: MfaPolicyGuard -----
public MfaPolicyGuard(MfaPolicyProvider mfaPolicyProvider);
@Override
protected boolean doEvaluate(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);
@Override
public String getFailureReason();
@Override
public String getGuardName();
public boolean allRequiredFactorsCompleted(FactorContext factorContext);
public boolean needsAdditionalFactors(FactorContext factorContext);

// ----- Class: RetryLimitGuard -----
public RetryLimitGuard(AuthContextProperties authContextProperties);
@Override
protected boolean doEvaluate(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);
private int getMaxRetries();
private int getFactorMaxRetries(String factorType);
private Integer getFactorRetryCount(FactorContext factorContext, String factorType);
public void incrementRetryCount(FactorContext factorContext);
public void resetRetryCount(FactorContext factorContext, String factorType);
@Override
public String getFailureReason();
public int getRemainingRetries(FactorContext factorContext);
public int getFactorRemainingRetries(FactorContext factorContext, String factorType);
@Override
public String getGuardName();

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.integration =====

// ----- Class: MfaStateMachineConfigurer -----
public MfaStateMachineConfigurer(MfaStateMachineService stateMachineService);
@Override
public void init(PlatformContext ctx, PlatformConfig config);
@Override
public void configure(FlowContext fc) throws Exception;
@Override
public int getOrder();

// ----- Interface: StateMachineFilterIntegration -----
public boolean preProcess(HttpServletRequest request, HttpServletResponse response, FactorContext context);
public void postProcess(HttpServletRequest request, HttpServletResponse response, FactorContext context, Object result);
public boolean canProceed(HttpServletRequest request, FactorContext context);

// ----- Class: StateMachineFilterIntegrationImpl -----
public StateMachineFilterIntegrationImpl(MfaStateMachineService stateMachineService);
@Override
public boolean preProcess(HttpServletRequest request, HttpServletResponse response, FactorContext context);
@Override
public void postProcess(HttpServletRequest request, HttpServletResponse response, FactorContext context, Object result);
@Override
public boolean canProceed(HttpServletRequest request, FactorContext context);
private MfaEvent determineEventFromResult(HttpServletRequest request, Object result);
private boolean isBlockingState(MfaState state);

// ----- Interface: StateMachineHandlerAdvice -----
public boolean beforeHandler(String handlerName, FactorContext context, HttpServletRequest request);
public void afterHandler(String handlerName, FactorContext context, HttpServletRequest request, Object result);
public void onHandlerError(String handlerName, FactorContext context, HttpServletRequest request, Exception error);

// ----- Class: StateMachineHandlerAdviceImpl -----
public StateMachineHandlerAdviceImpl(MfaStateMachineService stateMachineService);
@Override
public boolean beforeHandler(String handlerName, FactorContext context, HttpServletRequest request);
@Override
public void afterHandler(String handlerName, FactorContext context, HttpServletRequest request, Object result);
@Override
public void onHandlerError(String handlerName, FactorContext context, HttpServletRequest request, Exception error);
private boolean isHandlerAllowedInState(String handlerName, MfaState currentState);
private MfaEvent determineEventFromHandler(String handlerName, Object result, FactorContext context);
private MfaEvent determineErrorEvent(Exception error);

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.listener =====

// ----- Class: MfaStateChangeListener -----
@Override
public void stateChanged(State<MfaState, MfaEvent> from, State<MfaState, MfaEvent> to);
@Override
public void transition(Transition<MfaState, MfaEvent> transition);
@Override
public void stateMachineError(org.springframework.statemachine.StateMachine<MfaState, MfaEvent> stateMachine, Exception exception);
@Override
public void onSuccessfulTransition(String sessionId, MfaState fromState, MfaState toState, MfaEvent event);
@Override
public void onFailedTransition(String sessionId, MfaState currentState, MfaEvent event, Exception error);
private void recordStateChange(String fromState, String toState);
private void handleStateMachineError(String machineId, Exception exception);
public long getStateChangeCount(String fromState, String toState);
public long getEventCount(String event);

// ----- Interface: MfaStateMachineListener -----
public void onSuccessfulTransition(String sessionId, MfaState fromState, MfaState toState, MfaEvent event);
public void onFailedTransition(String sessionId, MfaState currentState, MfaEvent event, Exception error);

// ===== Package: io.springsecurity.springsecurity6x.security.statemachine.support =====

// ----- Class: StateContextHelper -----
public StateContextHelper(ContextPersistence contextPersistence);
public FactorContext extractFactorContext(StateContext<MfaState, MfaEvent> context);
private Authentication extractAuthentication(StateContext<MfaState, MfaEvent> context, String mfaSessionId);
private void restoreFactorContextFields(FactorContext factorContext, Map<Object, Object> variables);
private void restoreCompletedFactors(FactorContext factorContext, Map<Object, Object> variables);
private List<AuthenticationStepConfig> parseCompletedFactors(String completedFactorsStr, String flowTypeName);
private void restoreAvailableFactors(FactorContext factorContext, Map<Object, Object> variables);
private void restoreAdditionalData(FactorContext factorContext, Map<Object, Object> variables);
private MfaState extractCurrentState(Map<Object, Object> variables);
private HttpServletRequest extractHttpServletRequest(StateContext<MfaState, MfaEvent> context);
public void saveFactorContext(StateContext<MfaState, MfaEvent> context, FactorContext factorContext);
private String serializeCompletedFactors(List<AuthenticationStepConfig> completedFactors);