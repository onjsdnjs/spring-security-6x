-- schema.sql (PostgreSQL, auth 스키마 기준)

-- **주의:** ddl-auto: create 사용 시, 이 파일은 자동으로 실행됩니다.
-- 개발 환경에서 테이블을 새로 생성할 때만 사용하세요.
-- 프로덕션 환경에서는 ddl-auto: validate를 사용하고, Flyway/Liquibase 같은 마이그레이션 툴을 권장합니다.

-- 스키마 생성 (없으면 생성)
CREATE SCHEMA IF NOT EXISTS auth;

-- 기존 테이블 삭제 (개발/테스트 용이성을 위해 역순으로 삭제)
-- 조인 테이블부터 먼저 삭제
DROP TABLE IF EXISTS METHOD_RESOURCE_PERMISSIONS CASCADE;
DROP TABLE IF EXISTS METHOD_RESOURCE_ROLES CASCADE;
DROP TABLE IF EXISTS RESOURCES_ROLES CASCADE;
DROP TABLE IF EXISTS ROLE_PERMISSIONS CASCADE;
DROP TABLE IF EXISTS GROUP_ROLES CASCADE;
DROP TABLE IF EXISTS USER_GROUPS CASCADE;
DROP TABLE IF EXISTS ROLE_HIERARCHY_RELATIONSHIP CASCADE;

-- 엔티티 테이블 삭제
DROP TABLE IF EXISTS ROLE_HIERARCHY_CONFIG CASCADE;
DROP TABLE IF EXISTS METHOD_RESOURCES CASCADE;
DROP TABLE IF EXISTS RESOURCES CASCADE;
DROP TABLE IF EXISTS PERMISSION CASCADE;
DROP TABLE IF EXISTS DOCUMENT CASCADE;
DROP TABLE IF EXISTS ROLE CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;


-- USERS 테이블 (Users.java 엔티티 반영)
CREATE TABLE USERS (
                            id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                            username VARCHAR(255) NOT NULL UNIQUE,
                            password VARCHAR(255) NOT NULL,
                            name VARCHAR(255) NOT NULL,
                            roles VARCHAR(255), -- legacy roles string field (향후 마이그레이션 후 제거 고려)
                            age INT,
                            mfa_enabled BOOLEAN NOT NULL,
                            preferred_mfa_factor VARCHAR(255),
                            last_used_mfa_factor VARCHAR(255),
                            last_mfa_used_at TIMESTAMP,
                            registered_mfa_factors VARCHAR(255), -- List<String>은 DB에 String으로 저장 (쉼표로 구분)
                            PRIMARY KEY (id)
);

-- ROLE 테이블 (Role.java 엔티티 반영)
CREATE TABLE ROLE (
                           role_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                           role_name VARCHAR(255) NOT NULL UNIQUE,
                           role_desc VARCHAR(255),
                           is_expression VARCHAR(1) NOT NULL, -- 'Y' or 'N'
                           PRIMARY KEY (role_id)
);

-- PERMISSION 테이블 (Permission.java 엔티티 반영)
CREATE TABLE PERMISSION (
                                 permission_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                 permission_name VARCHAR(255) NOT NULL UNIQUE,
                                 description VARCHAR(255),
                                 target_type VARCHAR(50),
                                 action_type VARCHAR(50),
                                 PRIMARY KEY (permission_id)
);

-- APP_GROUP 테이블 (Group.java 엔티티 반영)
CREATE TABLE APP_GROUP (
                                group_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                group_name VARCHAR(255) NOT NULL UNIQUE,
                                description VARCHAR(255),
                                PRIMARY KEY (group_id)
);

-- RESOURCES 테이블 (Resources.java 엔티티 반영)
CREATE TABLE RESOURCES (
                                resource_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                resource_name VARCHAR(255) NOT NULL,
                                http_method VARCHAR(10) NOT NULL,
                                order_num INT NOT NULL,
                                resource_type VARCHAR(50) NOT NULL,
                                PRIMARY KEY (resource_id)
);

-- METHOD_RESOURCES 테이블 (MethodResource.java 엔티티 반영)
CREATE TABLE METHOD_RESOURCES (
                                       method_resource_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                       method_name VARCHAR(255) NOT NULL,
                                       class_name VARCHAR(255) NOT NULL,
                                       access_expression VARCHAR(1000) NOT NULL, -- SpEL 표현식 저장
                                       order_num INT NOT NULL,
                                       http_method VARCHAR(10),
                                       PRIMARY KEY (method_resource_id)
);

-- DOCUMENT 테이블 (Document.java 엔티티 반영)
CREATE TABLE DOCUMENT (
                               document_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                               title VARCHAR(255) NOT NULL,
                               content TEXT,
                               owner_username VARCHAR(255) NOT NULL,
                               created_at TIMESTAMP NOT NULL,
                               updated_at TIMESTAMP,
                               PRIMARY KEY (document_id)
);

-- ROLE_HIERARCHY_CONFIG 테이블 (RoleHierarchyEntity.java 엔티티 반영)
CREATE TABLE ROLE_HIERARCHY_CONFIG (
                                            hierarchy_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                            hierarchy_string TEXT NOT NULL UNIQUE, -- 계층 문자열
                                            description VARCHAR(255),
                                            is_active BOOLEAN NOT NULL, -- 현재 활성화된 계층인지
                                            PRIMARY KEY (hierarchy_id)
);


-- **조인 테이블들 (모두 OneToMany/ManyToOne 관계로 인한 명시적 조인 엔티티)**

-- USER_GROUPS (Users <-> Group)
CREATE TABLE USER_GROUPS (
                                  user_id BIGINT NOT NULL,
                                  group_id BIGINT NOT NULL,
                                  PRIMARY KEY (user_id, group_id),
                                  FOREIGN KEY (user_id) REFERENCES USERS(id) ON DELETE CASCADE,
                                  FOREIGN KEY (group_id) REFERENCES APP_GROUP(group_id) ON DELETE CASCADE
);

-- GROUP_ROLES (Group <-> Role)
CREATE TABLE GROUP_ROLES (
                                  group_id BIGINT NOT NULL,
                                  role_id BIGINT NOT NULL,
                                  PRIMARY KEY (group_id, role_id),
                                  FOREIGN KEY (group_id) REFERENCES APP_GROUP(group_id) ON DELETE CASCADE,
                                  FOREIGN KEY (role_id) REFERENCES ROLE(role_id) ON DELETE CASCADE
);

-- ROLE_PERMISSIONS (Role <-> Permission)
CREATE TABLE ROLE_PERMISSIONS (
                                       role_id BIGINT NOT NULL,
                                       permission_id BIGINT NOT NULL,
                                       PRIMARY KEY (role_id, permission_id),
                                       FOREIGN KEY (role_id) REFERENCES ROLE(role_id) ON DELETE CASCADE,
                                       FOREIGN KEY (permission_id) REFERENCES PERMISSION(permission_id) ON DELETE CASCADE
);

-- RESOURCES_ROLES (Resources <-> Role)
CREATE TABLE RESOURCES_ROLES (
                                      resource_id BIGINT NOT NULL,
                                      role_id BIGINT NOT NULL,
                                      PRIMARY KEY (resource_id, role_id),
                                      FOREIGN KEY (resource_id) REFERENCES RESOURCES(resource_id) ON DELETE CASCADE,
                                      FOREIGN KEY (role_id) REFERENCES ROLE(role_id) ON DELETE CASCADE
);

-- METHOD_RESOURCE_ROLES (MethodResource <-> Role)
CREATE TABLE METHOD_RESOURCE_ROLES (
                                            method_resource_id BIGINT NOT NULL,
                                            role_id BIGINT NOT NULL,
                                            PRIMARY KEY (method_resource_id, role_id),
                                            FOREIGN KEY (method_resource_id) REFERENCES METHOD_RESOURCES(method_resource_id) ON DELETE CASCADE,
                                            FOREIGN KEY (role_id) REFERENCES ROLE(role_id) ON DELETE CASCADE
);

-- METHOD_RESOURCE_PERMISSIONS (MethodResource <-> Permission)
CREATE TABLE METHOD_RESOURCE_PERMISSIONS (
                                                  method_resource_id BIGINT NOT NULL,
                                                  permission_id BIGINT NOT NULL,
                                                  PRIMARY KEY (method_resource_id, permission_id),
                                                  FOREIGN KEY (method_resource_id) REFERENCES METHOD_RESOURCES(method_resource_id) ON DELETE CASCADE,
                                                  FOREIGN KEY (permission_id) REFERENCES PERMISSION(permission_id) ON DELETE CASCADE
);

CREATE TABLE ROLE_HIERARCHY_RELATIONSHIP (
                                             hierarchy_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                             parent_role_id BIGINT NOT NULL,
                                             child_role_id BIGINT NOT NULL,
                                             description VARCHAR(255), -- <<< 새로운 description 컬럼 추가
                                             PRIMARY KEY (hierarchy_id),
                                             UNIQUE (parent_role_id, child_role_id),
                                             FOREIGN KEY (parent_role_id) REFERENCES ROLE(role_id) ON DELETE CASCADE,
                                             FOREIGN KEY (child_role_id) REFERENCES ROLE(role_id) ON DELETE CASCADE
);
